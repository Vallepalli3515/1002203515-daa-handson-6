Mathematically derive the average runtime complexity of the non-random pivot version of quicksort.

We must examine the average behavior of the algorithm across all potential inputs
in order to formally determine the average runtime complexity of the quicksort variant
with non-random pivot. Let (T(n)) represent the average runtime complexity, where (n) is the input array size.

The pivot selection in quicksort's non-random pivot variant is deterministic. 
The pivot is often selected as the array's final element. The array is then divided into two subarrays,
with all elements larger than the pivot being on the right side and all elements less than or equal
to the pivot being on the left. The pivot element is at the proper sorted position following partitioning.
Next, on the two subarrays, the method recurs.

The average-case analysis takes into account the algorithm's average performance across all conceivable
combinations of the input array. Assuming the items are spread randomly, the pivot splits the array into 
two sections roughly in the ratio of (1:1) for each recursive call.

The recurrence relation for the average-case runtime complexity will be examined now:

The array must be partitioned in (O(n)) time.
Following partitioning, the array is split into two subarrays, each of which is, on average
, half as large as the original array.
This is one way to express the recurrence relation: [T(n) = 2T(n/2) + O(n)]

This recurrence relation captures the fact that we split the array in (O(n)) time after making 
two recursive calls on subproblems that are roughly half the size of the original problem.

The non-random pivot variant of quicksort has an average runtime complexity of (O(n /log n)), according to the Master Theorem.

Accordingly, the non-random pivot version of quicksort has an average runtime complexity of (O(n /log n)).
